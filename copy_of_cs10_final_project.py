# -*- coding: utf-8 -*-
"""Copy of CS10_Final_Project.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1kHUoUMVEia4R_k6tLXaNNi_GWFTrhwL5
"""

# Commented out IPython magic to ensure Python compatibility.
# importing libraries
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
# %matplotlib inline
import seaborn as sns
import statsmodels.api as sm

# mount google drive to colab
from google.colab import drive
drive.mount('/content/drive')

# list files in directory
! ls "/content/drive/My Drive/CS10 Final Project/DEMO_I.XPT"

# reading in datasets
demo = pd.read_sas("/content/drive/My Drive/CS10 Final Project/DEMO_I.XPT")
body_measures = pd.read_sas("/content/drive/My Drive/CS10 Final Project/BMX_I.XPT")
physical_activity = pd.read_sas("/content/drive/My Drive/CS10 Final Project/PAQ_I.XPT")

#creating new variables
body_measures["Height_meters"] = body_measures["BMXHT"]/100 #creating a height in meters variable
body_measures["BMI"] = body_measures["BMXWT"]/(body_measures["Height_meters"]**2) #creating BMI variable from weight and height
physical_activity["total_MVPA"] = physical_activity[["PAD660", "PAD675"]].sum(axis=1) #Total minutes of moderate and vigorous physical activity per day
demo["Income:FPL ratio"] = pd.cut(demo["INDFMPIR"],5) #create 5-level categorical variable from income:poverty level ratio
demo = demo.sort_values("RIDAGEYR") #sort by age
demo = demo.loc[(demo["RIDAGEYR"]>=18) & (demo["RIDAGEYR"]<100)] #include only observations with age 18-100 years old
demo["age_cat"] = pd.cut(demo["RIDAGEYR"],8) #create 8-level categorical variable for age

#merging dataframes
merged = demo.merge(body_measures, on='SEQN') #merging the body_measures and demographics datasets on participant ID number
merged2 = merged.merge(physical_activity, on='SEQN') #merging previously merged dataset with physical_activity dataset on participant ID


list(merged2.columns.values) #creating LIST of all variables in newly merged datasets

# FEATURE 1 - takes as input user's gender, age, and height, and reports average weight for individuals of the same characteristics

# defining a function that creates a subset of data that matches* characteristics of user, returns mean weight within the subset
# *here "matches" is defined as observations with the same gender and age, and height within .05 meters
def average_weight(age, height, gender):
    if gender == "female":
        female = merged.loc[(merged["RIAGENDR"] == 2.0) & (merged["Height_meters"] <= height + 0.025) & (height - 0.025 >= merged["Height_meters"]) & (merged["RIDAGEYR"] == age)]
        print("Mean weight in kg for individuals of your age and height is: " + str(female["BMXWT"].mean()))
        return female["BMXWT"].mean()
    elif gender == "male":
        male = merged.loc[(merged["RIAGENDR"] == 1.0) & (merged["Height_meters"] <= height + 0.025) & (height - 0.025 >= merged["Height_meters"]) & (merged["RIDAGEYR"] == age)]
        print("Mean weight in kg for individuals of your age and height is: " + str(male["BMXWT"].mean()))
        return male["BMXWT"].mean()
               
#creating global variables with user characteristics
gender = input("What is your gender? ")
age = int(input("What is your age? "))
height = float(input("What is your height in meters? "))
weight = float(input("What is your weight in kilograms? "))

#calling new function on user characteristics
average_weight(age,height,gender)

g = sns.boxplot(x="BMXWT", data=body_measures) #create boxplot that displays users weight against distribution of weights in the dataset
g.set(xlabel="Weight in kilograms")
g.text(weight, 0.05,'*', fontsize=25, color='darkorange') #overlay user's weight

#Feature 2 - visualizing how exercise rates change with age

# Defining new function that takes as input user's reported gender, weight, and height
# returns 1 boxplot of total minutes exercise per age category for observations of same gender, weight within 6 kg and height within .05 meters as user
def exercise_over_time(gender,weight, height):
  if gender == "female":
    female = merged2.loc[(merged2['RIAGENDR'] == 2.0) & (merged2['BMXWT'] <= weight + 3) & (weight - 3 >= merged2['BMXWT'])]
    female = female.loc[(female["Height_meters"] >= (height - 0.025)) & (female["Height_meters"] <= (height + 0.025))]
    table_axis = female[['total_MVPA', 'age_cat']] #create table to use in boxplot
    sns.boxplot(x ="age_cat", y="total_MVPA", data=female, showfliers=False, showmeans=True)
    sns.pointplot(x='age_cat', y='total_MVPA', data=female.groupby('age_cat', as_index=False).mean()) #suppress outliers, show means
  elif gender == "male":
    male = merged2.loc[(merged2['RIAGENDR'] == 1.0) & (merged2['BMXWT'] <= weight + 3) & (weight - 3 >= merged2['BMXWT'])]
    male = male.loc[(male["Height_meters"] >= (height - 0.025)) & (male["Height_meters"] <= (height + 0.025))]
    table_axis = male[['total_MVPA', 'age_cat']] #create table to use in boxplot
    sns.boxplot(x ="age_cat", y="total_MVPA", data=male, showfliers=False, showmeans=True)
    sns.pointplot(x='age_cat', y='total_MVPA', data=male.groupby('age_cat', as_index=False).mean()) #suppress outliers, show means

# call function on global variables of user's reported characteristics
exercise_over_time(gender, weight, height)

# Feature 3 - Data Analysis
# what is the relationship between BMI and annual family income? 

#visualizing how income:FPL ratio changes by exercise level
def exercise_income_level(gender, age):
  if gender == "female":
    female = merged2.loc[(merged2["RIAGENDR"] == 2.0) & (merged2["RIDAGEYR"] == age)]
    table_axis = female[["total_MVPA", "Income:FPL ratio"]]
    sns.boxplot(x='Income:FPL ratio', y='total_MVPA', data=female, showfliers=False, showmeans=True)
    sns.pointplot(x='Income:FPL ratio', y='total_MVPA', data=female.groupby('Income:FPL ratio', as_index=False).mean())
  elif gender == "male":
    male = merged2.loc[(merged2["RIAGENDR"] == 1.0) & (merged2["RIDAGEYR"] == age)]
    table_axis = male[["total_MVPA", "Income:FPL ratio"]]
    sns.boxplot(x='Income:FPL ratio', y='total_MVPA', data=male, showfliers=False, showmeans=True)
    sns.pointplot(x='Income:FPL ratio', y='total_MVPA', data=male.groupby('Income:FPL ratio', as_index=False).mean())
    
exercise_income_level(gender,age)

# statistical analysis
X = merged[["INDFMPIR", "RIDAGEYR"]] #Annual family income and age as explanatory variables
X = sm.add_constant(X) #add constant to output
y = merged["BMI"] 

est = sm.OLS(y, X, missing='drop').fit() #ordinary least squares regression of BMI on income controlling for age

est.summary()

"""The results of the above regression suggest that for every 1 unit increase in income:federal poverty level ratio, BMI decreases by .25, holding age constant. This relationship is statistically significant at alpha = .05, though as can be seen on the below graph this may not be a practically significant relationship."""

# plotting regressions of income:FPL ratio on BMI
regplot = sns.regplot(x='INDFMPIR', y='BMI', data=merged)
regplot.set(xlabel='Income:Federal Poverty Limit Ratio', ylabel='Body Mass Index') #label axes

